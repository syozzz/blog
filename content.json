{"meta":{"title":"poco","subtitle":null,"description":null,"author":"syo","url":"https://syozzz.github.io/blog"},"pages":[{"title":"about","date":"2018-12-12T22:14:36.000Z","updated":"2020-07-27T03:38:25.880Z","comments":false,"path":"about/index.html","permalink":"https://syozzz.github.io/blog/about/index.html","excerpt":"","text":"与&nbsp; syo&nbsp; （ ） 对话中... bot_ui_ini()","keywords":"关于"},{"title":"book","date":"2018-12-19T23:11:06.000Z","updated":"2020-07-27T03:38:25.880Z","comments":false,"path":"book/index.html","permalink":"https://syozzz.github.io/blog/book/index.html","excerpt":"","text":""},{"title":"client","date":"2018-12-20T23:13:35.000Z","updated":"2020-07-27T03:38:25.880Z","comments":false,"path":"client/index.html","permalink":"https://syozzz.github.io/blog/client/index.html","excerpt":"","text":"直接下载 or 扫码下载：","keywords":"Android客户端"},{"title":"comment","date":"2018-12-20T23:13:48.000Z","updated":"2020-07-27T03:38:25.880Z","comments":true,"path":"comment/index.html","permalink":"https://syozzz.github.io/blog/comment/index.html","excerpt":"","text":"念两句诗 叙别梦、扬州一觉。 【宋代】吴文英《夜游宫·人去西楼雁杳》","keywords":"留言板"},{"title":"donate","date":"2018-12-20T23:13:05.000Z","updated":"2020-07-27T03:38:25.880Z","comments":false,"path":"donate/index.html","permalink":"https://syozzz.github.io/blog/donate/index.html","excerpt":"","text":"","keywords":"谢谢饲主了喵~"},{"title":"gallery","date":"2018-12-19T23:11:06.000Z","updated":"2020-07-27T03:38:25.880Z","comments":false,"path":"gallery/index.html","permalink":"https://syozzz.github.io/blog/gallery/index.html","excerpt":"","text":""},{"title":"lab","date":"2019-01-05T21:47:59.000Z","updated":"2020-07-27T03:38:25.880Z","comments":false,"path":"lab/index.html","permalink":"https://syozzz.github.io/blog/lab/index.html","excerpt":"","text":"sakura主题balabala","keywords":"Lab实验室"},{"title":"links","date":"2018-12-19T23:11:06.000Z","updated":"2020-07-27T03:38:25.880Z","comments":true,"path":"links/index.html","permalink":"https://syozzz.github.io/blog/links/index.html","excerpt":"","text":"","keywords":"友人帐"},{"title":"music","date":"2018-12-20T23:14:28.000Z","updated":"2020-07-27T03:38:25.880Z","comments":false,"path":"music/index.html","permalink":"https://syozzz.github.io/blog/music/index.html","excerpt":"","text":"","keywords":"喜欢的音乐"},{"title":"rss","date":"2018-12-20T23:09:03.000Z","updated":"2020-07-27T03:38:25.880Z","comments":true,"path":"rss/index.html","permalink":"https://syozzz.github.io/blog/rss/index.html","excerpt":"","text":""},{"title":"tags","date":"2018-12-12T22:14:16.000Z","updated":"2020-07-27T03:38:25.880Z","comments":true,"path":"tags/index.html","permalink":"https://syozzz.github.io/blog/tags/index.html","excerpt":"","text":""},{"title":"theme-sakura","date":"2019-01-04T22:53:25.000Z","updated":"2020-07-27T03:38:25.880Z","comments":false,"path":"theme-sakura/index.html","permalink":"https://syozzz.github.io/blog/theme-sakura/index.html","excerpt":"","text":"本 blog 主题魔改于 Hexo 主题 Sakura, 修改内容包括： 去除首页视频播放功能 去除 header-top 头像及签名 去除捐赠打赏功能 去除网易云音乐播放功能 去除 startdash 功能 去除 busuanzi 计数功能, 以便在 no-referer 的前提下使用部分限制图床 添加自定义书单页面 添加自定义图集页面后续新功能开发进行中~ 感谢原作者Mashiro &amp; Hojun","keywords":"Hexo 主题 Sakura 🌸"},{"title":"video","date":"2018-12-20T23:14:38.000Z","updated":"2020-07-27T03:38:25.880Z","comments":false,"path":"video/index.html","permalink":"https://syozzz.github.io/blog/video/index.html","excerpt":"","text":"var videos = [ { img: 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '放送时间: 2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' }, { img : 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' } ] .should-ellipsis{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:95%;}.should-ellipsis-full{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:100%;}.should-ellipsis i{position:absolute;right:24px;}.grey-text{color:#9e9e9e !important}.grey-text.text-darken-4{color:#212121 !important}html{line-height:1.15;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}img{border-style:none}progress{display:inline-block;vertical-align:baseline}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}html{-webkit-box-sizing:border-box;box-sizing:border-box}*,*:before,*:after{-webkit-box-sizing:inherit;box-sizing:inherit}ul:not(.browser-default){padding-left:0;list-style-type:none}ul:not(.browser-default)>li{list-style-type:none}.card{-webkit-box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2);box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2)}.hoverable{-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s}.hoverable:hover{-webkit-box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19)}i{line-height:inherit}i.right{float:right;margin-left:15px}.bangumi .right{float:right !important}.material-icons{text-rendering:optimizeLegibility;-webkit-font-feature-settings:'liga';-moz-font-feature-settings:'liga';font-feature-settings:'liga'}.row{margin-left:auto;margin-right:auto;margin-bottom:20px}.row:after{content:\"\";display:table;clear:both}.row .col{float:left;-webkit-box-sizing:border-box;box-sizing:border-box;padding:0 .75rem;min-height:1px}.row .col.s12{width:100%;margin-left:auto;left:auto;right:auto}@media only screen and (min-width:601px){.row .col.m6{width:50%;margin-left:auto;left:auto;right:auto}}html{line-height:1.5;font-family:-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen-Sans,Ubuntu,Cantarell,\"Helvetica Neue\",sans-serif;font-weight:normal;color:rgba(0,0,0,0.87)}@media only screen and (min-width:0){html{font-size:14px}}@media only screen and (min-width:992px){html{font-size:14.5px}}@media only screen and (min-width:1200px){html{font-size:15px}}.card{position:relative;margin:.5rem 0 1rem 0;background-color:#fff;-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s;border-radius:2px}.card .card-title{font-size:24px;font-weight:300}.card .card-title.activator{cursor:pointer}.card .card-image{position:relative}.card .card-image img{display:block;border-radius:2px 2px 0 0;position:relative;left:0;right:0;top:0;bottom:0;width:100%}.card .card-content{padding:24px;border-radius:0 0 2px 2px}.card .card-content p{margin:0}.card .card-content .card-title{display:block;line-height:32px;margin-bottom:8px}.card .card-content .card-title i{line-height:32px}.card .card-reveal{padding:24px;position:absolute;background-color:#fff;width:100%;overflow-y:auto;left:0;top:100%;height:100%;z-index:3;display:none}.card .card-reveal .card-title{cursor:pointer;display:block}.waves-effect{position:relative;cursor:pointer;display:inline-block;overflow:hidden;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-tap-highlight-color:transparent;vertical-align:middle;z-index:1;-webkit-transition:.3s ease-out;transition:.3s ease-out}.waves-effect img{position:relative;z-index:-1}.waves-block{display:block}::-webkit-input-placeholder{color:#d1d1d1}::-moz-placeholder{color:#d1d1d1}:-ms-input-placeholder{color:#d1d1d1}::-ms-input-placeholder{color:#d1d1d1}[type=\"radio\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"radio\"]:not(:checked)+span{position:relative;padding-left:35px;cursor:pointer;display:inline-block;height:25px;line-height:25px;font-size:1rem;-webkit-transition:.28s ease;transition:.28s ease;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border-radius:50%}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border:2px solid #5a5a5a}[type=\"radio\"]:not(:checked)+span:after{-webkit-transform:scale(0);transform:scale(0)}[type=\"checkbox\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"checkbox\"]:not(:checked):disabled+span:not(.lever):before{border:none;background-color:rgba(0,0,0,0.42)}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):before{width:0;height:0;border:3px solid transparent;left:6px;top:10px;-webkit-transform:rotateZ(37deg);transform:rotateZ(37deg);-webkit-transform-origin:100% 100%;transform-origin:100% 100%}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):after{height:20px;width:20px;background-color:transparent;border:2px solid #5a5a5a;top:0px;z-index:0}input[type=checkbox]:not(:disabled) ~ .lever:active:before,input[type=checkbox]:not(:disabled).tabbed:focus ~ .lever::before{-webkit-transform:scale(2.4);transform:scale(2.4);background-color:rgba(0,0,0,0.08)}input[type=range].focused:focus:not(.active)::-webkit-slider-thumb{-webkit-box-shadow:0 0 0 10px rgba(38,166,154,0.26);box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-moz-range-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-ms-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)} 番组计划 这里将是永远的回忆 window.onload = function(){ videos.forEach(function(video, i){ $('#rootRow').append(` ${video.title} ${video.jp} ${video.status} ${video.title} ${video.jp} 放送时间: ${video.time} ${video.desc} ${video.status} `) }) }","keywords":"B站"},{"title":"bangumi","date":"2019-02-10T21:32:48.000Z","updated":"2020-07-27T03:38:25.880Z","comments":false,"path":"bangumi/index.html","permalink":"https://syozzz.github.io/blog/bangumi/index.html","excerpt":"","text":"","keywords":null}],"posts":[{"title":"服务器端主动推送数据-SSE","slug":"SseEmitter","date":"2020-07-24T17:10:00.000Z","updated":"2020-07-27T03:38:25.880Z","comments":true,"path":"2020/07/24/SseEmitter/","link":"","permalink":"https://syozzz.github.io/blog/2020/07/24/SseEmitter/","excerpt":"","text":"服务器主动向客户端推送数据，往往我们首先想到的都是 websocket 技术。但其实，HTML5 还提供了另一种方法：SSE（Server-Sent Events）即服务器推送事件。相比于 websocket 来说， SSE 更加的简单和轻量，对于某些类型的应用来说，SSE 可能会是更优的选择。 SSE 的本质 严格地说，HTTP 协议无法做到服务器主动推送信息。但是，有一种变通方法，就是服务器向客户端声明，接下来要发送的是流信息（streaming）。 也就是说，发送的不是一次性的数据包，而是一个数据流，会连续不断地发送过来。这时，客户端不会关闭连接，会一直等着服务器发过来的新的数据流，视频播放就是这样的例子。本质上，这种通信就是以流信息的方式，完成一次用时很长的下载。 SSE 就是利用这种机制，使用流信息向浏览器推送信息。它基于 HTTP 协议，目前除了 IE/Edge，其他浏览器都支持。 –摘自阮一峰的博客 与 websocket 的对比 Websocket SSE 开发难度 使用较复杂，应用更臃肿 使用简单，应用更轻量，自动重连 数据流向 双向传递 单向，只能由服务器推送到客户端 传输性能 传输效率高 传输效率较低 兼容性 基于 SpringBoot 的实现定义 SSE 接口：@RestController @RequestMapping(&quot;/sse&quot;) public class SseController { @Autowired NotifyListener listener; @GetMapping(&quot;/register&quot;) public SseEmitter register(String taskId) { //4个小时超时 如果不设置 默认超时时间为30秒 设置为0永不过时 final SseEmitter emitter = new SseEmitter(14400_000L); try { listener.addClient(taskId, emitter); } catch (Exception e) { emitter.completeWithError(e); } return emitter; } } 创建一个 SseEmitter 对象并设置过期时间，然后 return 给客户端，这样便就创建好了一个 SSE 接口。通常会用一个处理类来保存所有创建的 SseEmitter 对象，以方便调用其 send 方法向客户端推送数据。 @Component @Slf4j public class NotifyListener { private ListMultimap&lt;String, SseEmitter&gt; emitters; @PostConstruct public void init() { emitters = Multimaps.newListMultimap((new LinkedHashMap&lt;String, Collection&lt;SseEmitter&gt;&gt;()), new Supplier&lt;List&lt;SseEmitter&gt;&gt;() { @Override public List&lt;SseEmitter&gt; get() { return new ArrayList&lt;SseEmitter&gt;(); } }); } @EventListener @Async public void handler(NotifyEvent event) throws IOException { String taskId = event.getTaskId(); int Status = event.getStatus(); List&lt;SseEmitter&gt; clients = emitters.get(clientId); if (status == TaskProgressUtil.TaskStatus.END.getStatus() || status == TaskProgressUtil.TaskStatus.ERROR.getStatus()) { notifyClientAndClose(clients, status, taskId); } else { notifyClient(clients, status); } } private void notifyClient(List&lt;SseEmitter&gt; clients, int status) throws IOException { for (SseEmitter client : clients) { client.send(status); } } private void notifyClientAndClose(List&lt;SseEmitter&gt; clients, int status, String taskId) throws IOException { for (SseEmitter client : clients) { client.send(status); client.complete(); } emitters.removeAll(taskId); } public void addClient(String taskId, SseEmitter emitter) { emitters.put(taskId, emitter); } } 这样，当服务端需要向客户端推送数据时，只需要 publish 一个 NotifyEvent 事件即可。 前端实现：1.创建请求const es = new EventSource(`/sse/register?taskId=${taskId}`); 2.设置事件回调open 事件，链接一旦创建，就会触发。 es.onopen = function (event) { // ... }; // 另一种写法 es.addEventListener(&#39;open&#39;, function (event) { // ... }, false); message 事件，客户端收到服务器发来的数据，就会触发。 es.onmessage = function (event) { var data = event.data; // handle message }; // 另一种写法 es.addEventListener(&#39;message&#39;, function (event) { var data = event.data; // handle message }, false); error 事件，如果发生通信错误，就会触发。 es.onerror = function (event) { // handle error event }; // 另一种写法 es.addEventListener(&#39;error&#39;, function (event) { // handle error event }, false); 也可以通过 addEventListener 来自定义事件。 es.addEventListener(&#39;myEvent&#39;, function (event) { var data = event.data; // handle message }, false); 此时，后端发送数据就不能简单的 send 数据了，而是要 send 一个 SseEventBuilder 对象来包装数据。 emitter.send(SseEmitter.event().name(&quot;myEvent&quot;).data(data)); 当数据推送流程结束时，调用 close 方法关闭连接。 es.close(); 踩坑如果是前端和后端联调的话，一定要记得 node 的代理不能直接代理 SSE 请求到后端接口，表现形式为请求会一直 pending，直到服务端 complete() 之后，代理服务器才会一口气把响应回传到前端。 参考链接 MDN，Using server-sent events 阮一峰的博客，Server-Sent Events 教程","categories":[{"name":"技术","slug":"技术","permalink":"https://syozzz.github.io/blog/categories/技术/"}],"tags":[{"name":"java","slug":"java","permalink":"https://syozzz.github.io/blog/tags/java/"},{"name":"spring","slug":"spring","permalink":"https://syozzz.github.io/blog/tags/spring/"},{"name":"SseEmitter","slug":"SseEmitter","permalink":"https://syozzz.github.io/blog/tags/SseEmitter/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"https://syozzz.github.io/blog/categories/技术/"}]}]}